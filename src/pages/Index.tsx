import { useState, useEffect, useRef, useCallback } from 'react';
import { Button } from '@/components/ui/button';
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card';
import { Badge } from '@/components/ui/badge';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Input } from '@/components/ui/input';
import { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle, DialogTrigger } from '@/components/ui/dialog';
import { Progress } from '@/components/ui/progress';
import Icon from '@/components/ui/icon';
import GoogleAuth from '@/components/auth/GoogleAuth';

const Index = () => {
  const [selectedMode, setSelectedMode] = useState('');
  const [coins, setCoins] = useState(100);
  const [promoCode, setPromoCode] = useState('');
  const [usedPromoCodes, setUsedPromoCodes] = useState<string[]>([]);
  const [playersOnline, setPlayersOnline] = useState(0);
  
  // –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
  const [user, setUser] = useState<any>(null);
  const [showAuth, setShowAuth] = useState(false);

  // –°–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä
  const [currentGame, setCurrentGame] = useState<'menu' | 'race' | 'pvp' | 'sandbox'>('menu');
  const [gameStats, setGameStats] = useState({ hp: 50, timeLeft: 60, score: 0 });
  
  // –°–æ—Å—Ç–æ—è–Ω–∏—è –≥–æ–Ω–∫–∏
  const [raceData, setRaceData] = useState({
    playerX: 150,
    playerY: 400,
    obstacles: [] as Array<{id: number, x: number, y: number}>,
    gameTime: 0,
    isPlaying: false,
    lives: 1,
    speed: 2
  });

  // –°–æ—Å—Ç–æ—è–Ω–∏—è PvP
  const [pvpData, setPvpData] = useState({
    chickens: [] as Array<{id: number, x: number, y: number, speed: number}>,
    weapon: 'pistol',
    isPlaying: false,
    timeLeft: 60,
    hp: 50,
    kills: 0
  });

  // –ò–Ω–≤–µ–Ω—Ç–∞—Ä—å
  const [inventory, setInventory] = useState({
    weapons: ['pistol'],
    vehicles: ['basic-car'],
    activeWeapon: 'pistol',
    activeVehicle: 'basic-car'
  });

  // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
  const [stats, setStats] = useState({
    gamesPlayed: 0,
    totalKills: 0,
    bestRaceTime: 0
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  const handleLogin = (userData: any, gameData: any) => {
    setUser(userData);
    if (gameData.coins !== undefined) setCoins(gameData.coins);
    if (gameData.usedPromoCodes) setUsedPromoCodes(gameData.usedPromoCodes);
    if (gameData.inventory) setInventory(gameData.inventory);
    if (gameData.stats) setStats(gameData.stats);
    setShowAuth(false);
  };

  const handleLogout = () => {
    setUser(null);
    // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –¥–æ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    setCoins(100);
    setUsedPromoCodes([]);
    setInventory({
      weapons: ['pistol'],
      vehicles: ['basic-car'],
      activeWeapon: 'pistol',
      activeVehicle: 'basic-car'
    });
    setStats({
      gamesPlayed: 0,
      totalKills: 0,
      bestRaceTime: 0
    });
  };

  const gameCanvasRef = useRef<HTMLDivElement>(null);
  const [isMobile, setIsMobile] = useState(false);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –º–æ–±–∏–ª—å–Ω–æ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞
  useEffect(() => {
    const checkMobile = () => {
      setIsMobile(window.innerWidth <= 768);
    };
    checkMobile();
    window.addEventListener('resize', checkMobile);
    return () => window.removeEventListener('resize', checkMobile);
  }, []);

  // –†–µ–∞–ª—å–Ω—ã–π —Å—á–µ—Ç—á–∏–∫ –æ–Ω–ª–∞–π–Ω –∏–≥—Ä–æ–∫–æ–≤
  useEffect(() => {
    const updateOnlineCount = () => {
      const baseCount = 12;
      const variation = Math.floor(Math.random() * 8);
      setPlayersOnline(baseCount + variation);
    };
    
    updateOnlineCount();
    const interval = setInterval(updateOnlineCount, 30000);
    return () => clearInterval(interval);
  }, []);

  // –ó–≤—É–∫–æ–≤—ã–µ —ç—Ñ—Ñ–µ–∫—Ç—ã
  const playSound = (type: 'click' | 'coin' | 'error' | 'race' | 'shoot' | 'hit') => {
    const sounds = {
      click: 'üîä',
      coin: 'üí∞',
      error: '‚ùå',
      race: 'üèÅ',
      shoot: 'üí•',
      hit: 'üéØ'
    };
    console.log(`Playing sound: ${sounds[type]}`);
  };

  // –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º—ã—à–∫–æ–π/–ø–∞–ª—å—Ü–µ–º
  const handleMouseMove = useCallback((e: React.MouseEvent | React.TouchEvent) => {
    if (currentGame !== 'race' || !raceData.isPlaying) return;
    
    const rect = gameCanvasRef.current?.getBoundingClientRect();
    if (!rect) return;

    let clientX: number;
    if ('touches' in e) {
      e.preventDefault();
      clientX = e.touches[0].clientX;
    } else {
      clientX = e.clientX;
    }

    const x = Math.max(10, Math.min(rect.width - 40, clientX - rect.left - 20));
    setRaceData(prev => ({ ...prev, playerX: x }));
  }, [currentGame, raceData.isPlaying]);

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ –∫—É—Ä–∏—Ü–∞–º
  const handleChickenClick = (chickenId: number) => {
    if (currentGame !== 'pvp' || !pvpData.isPlaying) return;
    
    playSound('shoot');
    setPvpData(prev => ({
      ...prev,
      chickens: prev.chickens.filter(c => c.id !== chickenId),
      kills: prev.kills + 1
    }));
    
    const reward = getWeaponPower(inventory.activeWeapon);
    setCoins(prev => prev + reward);
  };

  // –õ–æ–≥–∏–∫–∞ –≥–æ–Ω–∫–∏
  useEffect(() => {
    if (currentGame !== 'race' || !raceData.isPlaying) return;

    const gameLoop = setInterval(() => {
      setRaceData(prev => {
        const newObstacles = prev.obstacles
          .map(obs => ({ ...obs, y: obs.y + prev.speed }))
          .filter(obs => obs.y < window.innerHeight);

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è - –±—ã—Å—Ç—Ä–µ–µ –∏ –ø–æ –≤—Å–µ–π —à–∏—Ä–∏–Ω–µ
        if (Math.random() < 0.08) {
          const canvasWidth = gameCanvasRef.current?.clientWidth || 400;
          newObstacles.push({
            id: Date.now(),
            x: Math.random() * (canvasWidth - 60) + 30,
            y: -20
          });
        }

        // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–æ–ª–∫–Ω–æ–≤–µ–Ω–∏–π
        const collision = newObstacles.some(obs => 
          Math.abs(obs.x - prev.playerX) < 25 && 
          Math.abs(obs.y - prev.playerY) < 25
        );

        if (collision) {
          if (prev.lives > 1) {
            playSound('hit');
            return { ...prev, lives: prev.lives - 1, obstacles: newObstacles.filter(obs => 
              !(Math.abs(obs.x - prev.playerX) < 25 && Math.abs(obs.y - prev.playerY) < 25)
            )};
          } else {
            playSound('error');
            setStats(prevStats => ({ ...prevStats, gamesPlayed: prevStats.gamesPlayed + 1 }));
            setTimeout(() => {
              alert('üí• –ê–≤–∞—Ä–∏—è! –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞!');
              setCurrentGame('menu');
            }, 100);
            return { ...prev, isPlaying: false };
          }
        }

        const newTime = prev.gameTime + 0.1;
        if (newTime >= 50) {
          // –ü–æ–±–µ–¥–∞!
          const reward = 200 + (prev.lives * 50);
          setCoins(prevCoins => prevCoins + reward);
          setStats(prevStats => ({ 
            ...prevStats, 
            gamesPlayed: prevStats.gamesPlayed + 1,
            bestRaceTime: Math.max(prevStats.bestRaceTime, 50)
          }));
          setTimeout(() => {
            alert(`üèÅ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –¥–æ–µ—Ö–∞–ª –¥–æ —Ñ–∏–Ω–∏—à–∞! +${reward} –º–æ–Ω–µ—Ç`);
            setCurrentGame('menu');
          }, 100);
          return { ...prev, isPlaying: false, gameTime: 50 };
        }

        return { ...prev, obstacles: newObstacles, gameTime: newTime };
      });
    }, 100);

    return () => clearInterval(gameLoop);
  }, [currentGame, raceData.isPlaying, inventory.activeVehicle]);

  // –õ–æ–≥–∏–∫–∞ PvP
  useEffect(() => {
    if (currentGame !== 'pvp' || !pvpData.isPlaying) return;

    const gameLoop = setInterval(() => {
      setPvpData(prev => {
        // –î–≤–∏–≥–∞–µ–º –∫—É—Ä–∏—Ü
        const updatedChickens = prev.chickens
          .map(chicken => ({
            ...chicken,
            x: chicken.x + chicken.speed,
            y: chicken.y + (Math.random() - 0.5) * 2
          }))
          .filter(chicken => chicken.x < window.innerWidth);

        // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã—Ö –∫—É—Ä–∏—Ü - –±—ã—Å—Ç—Ä–µ–µ
        const newChickens = [...updatedChickens];
        if (Math.random() < 0.25) {
          newChickens.push({
            id: Date.now(),
            x: -30,
            y: Math.random() * (window.innerHeight - 100) + 50,
            speed: 2 + Math.random() * 4
          });
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—É—Ä–∏—Ü, –∫–æ—Ç–æ—Ä—ã–µ —É–±–µ–∂–∞–ª–∏
        const canvasWidth = window.innerWidth || 400;
        const escapedChickens = prev.chickens.filter(c => c.x >= canvasWidth).length;
        const newHp = Math.max(0, prev.hp - escapedChickens * 10);
        
        const newTimeLeft = prev.timeLeft - 0.1;
        
        if (newHp <= 0) {
          setStats(prevStats => ({ ...prevStats, gamesPlayed: prevStats.gamesPlayed + 1 }));
          setTimeout(() => {
            alert('üíÄ –ò–≥—Ä–∞ –æ–∫–æ–Ω—á–µ–Ω–∞! –¢–µ–±—è –æ–¥–æ–ª–µ–ª–∏ –∫—É—Ä–∏—Ü—ã!');
            setCurrentGame('menu');
          }, 100);
          return { ...prev, isPlaying: false, hp: 0 };
        }

        if (newTimeLeft <= 0) {
          const reward = prev.kills * 10 + 100;
          setCoins(prevCoins => prevCoins + reward);
          setStats(prevStats => ({ 
            ...prevStats, 
            gamesPlayed: prevStats.gamesPlayed + 1,
            totalKills: prevStats.totalKills + prev.kills
          }));
          setTimeout(() => {
            alert(`üéâ –ü–æ–±–µ–¥–∞! –¢—ã –ø—Ä–æ–¥–µ—Ä–∂–∞–ª—Å—è –º–∏–Ω—É—Ç—É! –£–±–∏—Ç–æ –∫—É—Ä–∏—Ü: ${prev.kills}. +${reward} –º–æ–Ω–µ—Ç`);
            setCurrentGame('menu');
          }, 100);
          return { ...prev, isPlaying: false, timeLeft: 0 };
        }

        return { 
          ...prev, 
          chickens: newChickens, 
          hp: newHp,
          timeLeft: newTimeLeft
        };
      });
    }, 100);

    return () => clearInterval(gameLoop);
  }, [currentGame, pvpData.isPlaying]);

  const getWeaponPower = (weapon: string) => {
    const powers: Record<string, number> = {
      'pistol': 5,
      'shotgun': 8,
      'machine-gun': 12,
      'cannon': 20,
      'freeze-gun': 15
    };
    return powers[weapon] || 5;
  };

  const getVehicleLives = (vehicle: string) => {
    const lives: Record<string, number> = {
      'basic-car': 1,
      'monster-truck': 2,
      'racing-car': 1
    };
    return lives[vehicle] || 1;
  };

  const shopItems = [
    // –û—Ä—É–∂–∏–µ
    {
      id: 1,
      name: '–î—Ä–æ–±–æ–≤–∏–∫',
      type: 'weapon',
      price: 300,
      image: '/img/a7f38b6b-0ef4-4eee-8148-3960f69ff529.jpg',
      rarity: '–†–µ–¥–∫–∞—è',
      description: '–£–≤–µ–ª–∏—á–µ–Ω–Ω—ã–π —É—Ä–æ–Ω –≤ PvP –±–∏—Ç–≤–∞—Ö',
      gameId: 'shotgun'
    },
    {
      id: 2,
      name: '–ü—É–ª–µ–º–µ—Ç',
      type: 'weapon',
      price: 500,
      image: '/img/a7f38b6b-0ef4-4eee-8148-3960f69ff529.jpg',
      rarity: '–≠–ø–∏—á–µ—Å–∫–∞—è',
      description: '–í—ã—Å–æ–∫–∞—è —Å–∫–æ—Ä–æ—Å—Ç—Ä–µ–ª—å–Ω–æ—Å—Ç—å –∏ —É—Ä–æ–Ω',
      gameId: 'machine-gun'
    },
    {
      id: 3,
      name: '–ü—É—à–∫–∞ –∑–∞–º–µ–¥–ª–µ–Ω–∏—è',
      type: 'weapon',
      price: 800,
      image: '/img/a7f38b6b-0ef4-4eee-8148-3960f69ff529.jpg',
      rarity: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è',
      description: '–ó–∞–º–µ–¥–ª—è–µ—Ç –∫—É—Ä–∏—Ü –≤ PvP —Ä–µ–∂–∏–º–µ',
      gameId: 'freeze-gun'
    },
    {
      id: 4,
      name: '–†–∞–∫–µ—Ç–Ω–∏—Ü–∞',
      type: 'weapon',
      price: 1200,
      image: '/img/a7f38b6b-0ef4-4eee-8148-3960f69ff529.jpg',
      rarity: '–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è',
      description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π —É—Ä–æ–Ω –ø–æ –ø–ª–æ—â–∞–¥–∏',
      gameId: 'cannon'
    },
    // –¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç  
    {
      id: 5,
      name: '–ú–æ–Ω—Å—Ç—Ä —Ç—Ä–∞–∫',
      type: 'vehicle',
      price: 600,
      image: '/img/5d22640a-5af8-46ec-b1ba-93f244fc9716.jpg',
      rarity: '–≠–ø–∏—á–µ—Å–∫–∞—è',
      description: '2 –∂–∏–∑–Ω–∏ –≤ –≥–æ–Ω–∫–∞—Ö, –ø—Ä–æ–µ–∑–∂–∞–µ—Ç —á–µ—Ä–µ–∑ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è',
      gameId: 'monster-truck'
    },
    {
      id: 6,
      name: '–ì–æ–Ω–æ—á–Ω–∞—è –º–∞—à–∏–Ω–∞',
      type: 'vehicle',
      price: 900,
      image: '/img/5d22640a-5af8-46ec-b1ba-93f244fc9716.jpg',
      rarity: '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è',
      description: '–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è —Å–∫–æ—Ä–æ—Å—Ç—å –≤ –≥–æ–Ω–∫–∞—Ö',
      gameId: 'racing-car'
    }
  ];

  const handlePromoCode = () => {
    playSound('click');
    const validCodes = ['–ø–∏–Ω–≥–≤–∏–Ω', '–∑–∞–π—á–∏–∫'];
    const code = promoCode.toLowerCase();
    
    if (usedPromoCodes.includes(code)) {
      playSound('error');
      alert('‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω!');
      return;
    }
    
    if (validCodes.includes(code)) {
      setCoins(prev => prev + 100);
      setUsedPromoCodes(prev => [...prev, code]);
      setPromoCode('');
      playSound('coin');
      alert('üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! +100 –º–æ–Ω–µ—Ç');
    } else {
      playSound('error');
      alert('‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø—Ä–æ–º–æ–∫–æ–¥');
    }
  };

  const buyItem = (item: any) => {
    playSound('click');
    if (coins >= item.price) {
      setCoins(prev => prev - item.price);
      
      if (item.type === 'weapon') {
        setInventory(prev => ({
          ...prev,
          weapons: [...prev.weapons, item.gameId],
          activeWeapon: item.gameId
        }));
      } else if (item.type === 'vehicle') {
        setInventory(prev => ({
          ...prev,
          vehicles: [...prev.vehicles, item.gameId],
          activeVehicle: item.gameId
        }));
      }
      
      playSound('coin');
      alert(`‚úÖ –ö—É–ø–ª–µ–Ω–æ: ${item.name}!`);
    } else {
      playSound('error');
      alert('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç!');
    }
  };

  const startGame = (gameType: 'race' | 'pvp' | 'sandbox') => {
    playSound('click');
    setCurrentGame(gameType);
    
    if (gameType === 'race') {
      setRaceData({
        playerX: 150,
        playerY: 400,
        obstacles: [],
        gameTime: 0,
        isPlaying: true,
        lives: getVehicleLives(inventory.activeVehicle),
        speed: inventory.activeVehicle === 'racing-car' ? 3 : 2
      });
    } else if (gameType === 'pvp') {
      setPvpData({
        chickens: [],
        weapon: inventory.activeWeapon,
        isPlaying: true,
        timeLeft: 60,
        hp: 50,
        kills: 0
      });
    }
  };

  const renderGame = () => {
    if (currentGame === 'race') {
      return (
        <div className="fixed inset-0 bg-green-400 z-50">
          <div className="absolute top-4 left-4 text-white font-bold">
            <p>–í—Ä–µ–º—è: {Math.floor(raceData.gameTime)}—Å / 50—Å</p>
            <p>–ñ–∏–∑–Ω–∏: {raceData.lives}</p>
            <p>–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {inventory.activeVehicle}</p>
          </div>
          <div className="absolute top-4 right-4">
            <Button onClick={() => setCurrentGame('menu')} variant="secondary" size="sm">
              –í—ã—Ö–æ–¥
            </Button>
          </div>
          
          <div 
            ref={gameCanvasRef}
            className="w-full h-full relative overflow-hidden cursor-none"
            onMouseMove={handleMouseMove}
            onTouchMove={handleMouseMove}
            onTouchStart={handleMouseMove}
          >
            {/* –î–æ—Ä–æ–≥–∞ */}
            <div className="absolute inset-0 bg-gray-700">
              <div className="w-full h-full bg-gradient-to-b from-gray-600 to-gray-800">
                {/* –†–∞–∑–º–µ—Ç–∫–∞ –¥–æ—Ä–æ–≥–∏ */}
                {[...Array(10)].map((_, i) => (
                  <div
                    key={i}
                    className="absolute w-2 h-8 bg-white left-1/2 transform -translate-x-1/2"
                    style={{ 
                      top: `${i * 60 + (raceData.gameTime * 50) % 60}px`,
                      opacity: 0.8 
                    }}
                  />
                ))}
              </div>
            </div>

            {/* –ò–≥—Ä–æ–∫ */}
            <div
              className="absolute w-8 h-8 bg-blue-500 rounded transform -translate-x-1/2"
              style={{ 
                left: `${Math.min(raceData.playerX, window.innerWidth - 50)}px`, 
                top: `${raceData.playerY}px`,
                transition: isMobile ? 'none' : 'left 0.1s ease'
              }}
            >
              üöó
            </div>

            {/* –ü—Ä–µ–ø—è—Ç—Å—Ç–≤–∏—è */}
            {raceData.obstacles.map(obstacle => (
              <div
                key={obstacle.id}
                className="absolute w-8 h-8 bg-red-500 rounded z-5"
                style={{ 
                  left: `${obstacle.x}px`, 
                  top: `${obstacle.y}px` 
                }}
              >
                üöõ
              </div>
            ))}
          </div>
        </div>
      );
    }

    if (currentGame === 'pvp') {
      return (
        <div className="fixed inset-0 bg-orange-300 z-50">
          <div className="absolute top-4 left-4 text-white font-bold">
            <p>–í—Ä–µ–º—è: {Math.floor(pvpData.timeLeft)}—Å</p>
            <p>HP: {pvpData.hp}/50</p>
            <p>–£–±–∏—Ç–æ: {pvpData.kills}</p>
            <p>–û—Ä—É–∂–∏–µ: {inventory.activeWeapon}</p>
          </div>
          <div className="absolute top-4 right-4">
            <Button onClick={() => setCurrentGame('menu')} variant="secondary" size="sm">
              –í—ã—Ö–æ–¥
            </Button>
          </div>

          <div className="w-full h-full relative overflow-hidden">
            {/* –ö—É—Ä–∏—Ü—ã */}
            {pvpData.chickens.map(chicken => (
              <div
                key={chicken.id}
                className="absolute w-12 h-12 cursor-pointer hover:scale-110 transition-transform z-10"
                style={{ 
                  left: `${chicken.x}px`, 
                  top: `${chicken.y}px`,
                  pointerEvents: 'auto'
                }}
                onClick={() => handleChickenClick(chicken.id)}
                onTouchStart={(e) => {
                  e.preventDefault();
                  e.stopPropagation();
                  handleChickenClick(chicken.id);
                }}
              >
                üêî
              </div>
            ))}
            
            <div className="absolute bottom-10 left-1/2 transform -translate-x-1/2 text-center">
              <p className="text-white font-bold mb-2">–ö–ª–∏–∫–∞–π –ø–æ –∫—É—Ä–∏—Ü–∞–º!</p>
              <div className="w-16 h-16 bg-brown-600 rounded-full flex items-center justify-center">
                üéØ
              </div>
            </div>
          </div>
        </div>
      );
    }

    if (currentGame === 'sandbox') {
      return (
        <div className="fixed inset-0 bg-yellow-200 z-50">
          <div className="absolute top-4 left-4 text-black font-bold">
            <p>–ü–µ—Å–æ—á–Ω–∏—Ü–∞ - —Ä–µ–∂–∏–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è</p>
            <p>–û—Ä—É–∂–∏–µ: {inventory.activeWeapon}</p>
            <p>–£—Ä–æ–Ω: {getWeaponPower(inventory.activeWeapon)}</p>
          </div>
          <div className="absolute top-4 right-4">
            <Button onClick={() => setCurrentGame('menu')} variant="secondary" size="sm">
              –í—ã—Ö–æ–¥
            </Button>
          </div>

          <div className="flex items-center justify-center h-full">
            <div className="text-center space-y-4">
              <div className="text-6xl animate-bounce">üêî</div>
              <Button
                size="lg"
                className="bg-red-500 hover:bg-red-600 text-white"
                onClick={() => {
                  playSound('shoot');
                  setCoins(prev => prev + 1);
                }}
              >
                üéØ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ä—É–∂–∏–µ
              </Button>
              <p className="text-gray-700">–ö–ª–∏–∫–∞–π –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–Ω–∞</p>
            </div>
          </div>
        </div>
      );
    }

    return null;
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-game-orange/20 via-game-yellow/20 to-game-blue/20 font-rubik">
      {renderGame()}
      
      {/* Header */}
      <header className="bg-white/90 backdrop-blur-sm border-b-4 border-game-orange shadow-lg">
        <div className="container mx-auto px-4 py-4 flex items-center justify-between">
          <div className="flex items-center space-x-2 md:space-x-4">
            <div className="w-10 h-10 md:w-12 md:h-12 bg-game-orange rounded-full flex items-center justify-center animate-bounce-in">
              <span className="text-xl md:text-2xl">üêî</span>
            </div>
            <h1 className="text-xl md:text-3xl font-bold text-gray-800">CHICKEN GUN</h1>
          </div>
          
          <div className="flex items-center space-x-2 md:space-x-4">
            <div className="flex items-center space-x-1 md:space-x-2 bg-game-yellow px-2 md:px-4 py-1 md:py-2 rounded-full">
              <Icon name="Coins" size={isMobile ? 16 : 20} />
              <span className="font-bold text-gray-800 text-sm md:text-base">{coins}</span>
            </div>
            <div className="flex items-center space-x-2 bg-green-500 px-3 py-1 rounded-full">
              <div className="w-2 h-2 bg-white rounded-full animate-pulse"></div>
              <span className="text-white text-sm font-bold">{playersOnline} –æ–Ω–ª–∞–π–Ω</span>
            </div>
          </div>
        </div>
      </header>

      <main className="container mx-auto px-4 py-4 md:py-8">
        <Tabs defaultValue="modes" className="w-full">
          <TabsList className={`grid w-full ${isMobile ? 'grid-cols-1 gap-2' : 'grid-cols-3'} mb-6 md:mb-8`}>
            <TabsTrigger value="modes" className="text-sm md:text-lg font-bold">
              <Icon name="Gamepad2" size={isMobile ? 16 : 20} className="mr-1 md:mr-2" />
              –ò–≥—Ä–æ–≤—ã–µ –†–µ–∂–∏–º—ã
            </TabsTrigger>
            <TabsTrigger value="shop" className="text-sm md:text-lg font-bold">
              <Icon name="ShoppingBag" size={isMobile ? 16 : 20} className="mr-1 md:mr-2" />
              –ú–∞–≥–∞–∑–∏–Ω
            </TabsTrigger>
            <TabsTrigger value="promo" className="text-sm md:text-lg font-bold">
              <Icon name="Gift" size={isMobile ? 16 : 20} className="mr-1 md:mr-2" />
              –ü—Ä–æ–º–æ–∫–æ–¥—ã
            </TabsTrigger>
          </TabsList>

          <TabsContent value="modes" className="space-y-4 md:space-y-6">
            <div className="text-center mb-6 md:mb-8 animate-fade-in">
              <h2 className="text-2xl md:text-4xl font-bold text-gray-800 mb-2">–í—ã–±–µ—Ä–∏ —Ä–µ–∂–∏–º –∏–≥—Ä—ã!</h2>
              <p className="text-sm md:text-lg text-gray-600">–ù–∞—Å—Ç–æ—è—â–∏–µ –º–∏–Ω–∏-–∏–≥—Ä—ã —Å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∏ —ç–∫—à–µ–Ω–æ–º</p>
            </div>

            <div className={`grid ${isMobile ? 'grid-cols-1' : 'md:grid-cols-3'} gap-4 md:gap-6`}>
              <Card className="cursor-pointer transition-all duration-300 hover:scale-105 hover:shadow-xl border-4 border-transparent hover:border-game-green">
                <CardHeader className="text-center pb-4">
                  <div className="w-12 h-12 md:w-16 md:h-16 bg-game-green rounded-full mx-auto mb-4 flex items-center justify-center shadow-lg">
                    <Icon name="Car" size={isMobile ? 24 : 32} className="text-white" />
                  </div>
                  <CardTitle className="text-lg md:text-xl font-bold text-gray-800">–ì–æ–Ω–∫–∏</CardTitle>
                  <CardDescription className="text-sm md:text-base text-gray-600">
                    –£–ø—Ä–∞–≤–ª—è–π –º–∞—à–∏–Ω–æ–π –º—ã—à–∫–æ–π/–ø–∞–ª—å—Ü–µ–º. –î–æ–±–µ—Ä–∏—Å—å –¥–æ —Ñ–∏–Ω–∏—à–∞ –∑–∞ 50 —Å–µ–∫—É–Ω–¥!
                  </CardDescription>
                </CardHeader>
                <CardContent className="text-center">
                  <Badge variant="secondary" className="mb-3">–í—Ä–µ–º—è: 50 —Å–µ–∫—É–Ω–¥</Badge>
                  <Button 
                    className="w-full bg-game-green hover:bg-game-green/90 text-white font-bold"
                    onClick={() => startGame('race')}
                  >
                    –ù–∞—á–∞—Ç—å –≥–æ–Ω–∫—É üèÅ
                  </Button>
                </CardContent>
              </Card>

              <Card className="cursor-pointer transition-all duration-300 hover:scale-105 hover:shadow-xl border-4 border-transparent hover:border-game-orange">
                <CardHeader className="text-center pb-4">
                  <div className="w-12 h-12 md:w-16 md:h-16 bg-game-orange rounded-full mx-auto mb-4 flex items-center justify-center shadow-lg">
                    <Icon name="Crosshair" size={isMobile ? 24 : 32} className="text-white" />
                  </div>
                  <CardTitle className="text-lg md:text-xl font-bold text-gray-800">PvP –ë–∏—Ç–≤—ã</CardTitle>
                  <CardDescription className="text-sm md:text-base text-gray-600">
                    –ö–ª–∏–∫–∞–π –ø–æ –∫—É—Ä–∏—Ü–∞–º! –ü—Ä–æ–¥–µ—Ä–∂–∏—Å—å 1 –º–∏–Ω—É—Ç—É. 50 HP, -10 –∑–∞ –ø—Ä–æ–ø—É—Å–∫.
                  </CardDescription>
                </CardHeader>
                <CardContent className="text-center">
                  <Badge variant="secondary" className="mb-3">HP: 50 ‚Ä¢ –í—Ä–µ–º—è: 60—Å</Badge>
                  <Button 
                    className="w-full bg-game-orange hover:bg-game-orange/90 text-white font-bold"
                    onClick={() => startGame('pvp')}
                  >
                    –í –±–æ–π! üéØ
                  </Button>
                </CardContent>
              </Card>

              <Card className="cursor-pointer transition-all duration-300 hover:scale-105 hover:shadow-xl border-4 border-transparent hover:border-game-yellow">
                <CardHeader className="text-center pb-4">
                  <div className="w-12 h-12 md:w-16 md:h-16 bg-game-yellow rounded-full mx-auto mb-4 flex items-center justify-center shadow-lg">
                    <Icon name="Map" size={isMobile ? 24 : 32} className="text-white" />
                  </div>
                  <CardTitle className="text-lg md:text-xl font-bold text-gray-800">–ü–µ—Å–æ—á–Ω–∏—Ü–∞</CardTitle>
                  <CardDescription className="text-sm md:text-base text-gray-600">
                    –¢–µ—Å—Ç–∏—Ä—É–π –Ω–æ–≤–æ–µ –æ—Ä—É–∂–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–π —É—Ä–æ–Ω –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.
                  </CardDescription>
                </CardHeader>
                <CardContent className="text-center">
                  <Badge variant="secondary" className="mb-3">–°–≤–æ–±–æ–¥–Ω–∞—è –∏–≥—Ä–∞</Badge>
                  <Button 
                    className="w-full bg-game-yellow hover:bg-game-yellow/90 text-white font-bold"
                    onClick={() => startGame('sandbox')}
                  >
                    –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å üîß
                  </Button>
                </CardContent>
              </Card>
            </div>

            <div className="bg-white/90 backdrop-blur-sm rounded-2xl p-4 md:p-6 border-4 border-blue-500">
              <h3 className="text-xl font-bold text-gray-800 mb-4 text-center">
                üéÆ –¢–≤–æ–π –∞—Ä—Å–µ–Ω–∞–ª
              </h3>
              <div className="grid grid-cols-2 gap-4">
                <div>
                  <p className="font-bold text-gray-700 mb-2">–ê–∫—Ç–∏–≤–Ω–æ–µ –æ—Ä—É–∂–∏–µ:</p>
                  <Badge variant="outline" className="text-sm">{inventory.activeWeapon}</Badge>
                </div>
                <div>
                  <p className="font-bold text-gray-700 mb-2">–ê–∫—Ç–∏–≤–Ω—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç:</p>
                  <Badge variant="outline" className="text-sm">{inventory.activeVehicle}</Badge>
                </div>
              </div>
            </div>
          </TabsContent>

          <TabsContent value="shop" className="space-y-4 md:space-y-6">
            <div className="text-center mb-6 md:mb-8 animate-fade-in">
              <h2 className="text-2xl md:text-4xl font-bold text-gray-800 mb-2">–ú–∞–≥–∞–∑–∏–Ω —É–ª—É—á—à–µ–Ω–∏–π</h2>
              <p className="text-sm md:text-lg text-gray-600">–ü–æ–∫—É–ø–∞–π –º–æ—â–Ω–æ–µ –æ—Ä—É–∂–∏–µ –∏ –±—ã—Å—Ç—Ä—ã–µ –º–∞—à–∏–Ω—ã!</p>
            </div>

            <div className={`grid ${isMobile ? 'grid-cols-1' : 'md:grid-cols-2 lg:grid-cols-3'} gap-4 md:gap-6`}>
              {shopItems.map((item, index) => (
                <Dialog key={item.id}>
                  <DialogTrigger asChild>
                    <Card className="cursor-pointer transition-all duration-300 hover:scale-105 hover:shadow-xl border-4 border-transparent hover:border-game-blue animate-scale-in"
                          style={{ animationDelay: `${index * 0.1}s` }}>
                      <CardHeader className="text-center">
                        <div className="w-16 h-16 md:w-24 md:h-24 bg-gray-100 rounded-2xl mx-auto mb-4 overflow-hidden">
                          <img 
                            src={item.image} 
                            alt={item.name}
                            className="w-full h-full object-cover"
                          />
                        </div>
                        <CardTitle className="text-sm md:text-lg font-bold text-gray-800">{item.name}</CardTitle>
                        <Badge 
                          variant={
                            item.rarity === '–ú–∏—Ñ–∏—á–µ—Å–∫–∞—è' ? 'destructive' : 
                            item.rarity === '–õ–µ–≥–µ–Ω–¥–∞—Ä–Ω–∞—è' ? 'default' : 
                            item.rarity === '–≠–ø–∏—á–µ—Å–∫–∞—è' ? 'secondary' : 'outline'
                          }
                          className="mb-2 text-xs"
                        >
                          {item.rarity}
                        </Badge>
                      </CardHeader>
                      <CardContent className="text-center">
                        <div className="flex items-center justify-center space-x-2 mb-4">
                          <Icon name="Coins" size={16} className="text-game-yellow" />
                          <span className="text-lg md:text-xl font-bold text-gray-800">{item.price}</span>
                        </div>
                      </CardContent>
                    </Card>
                  </DialogTrigger>
                  <DialogContent className="max-w-md">
                    <DialogHeader>
                      <DialogTitle className="text-xl font-bold">{item.name}</DialogTitle>
                      <DialogDescription className="text-base">
                        {item.description}
                      </DialogDescription>
                    </DialogHeader>
                    <div className="text-center space-y-4">
                      <img 
                        src={item.image} 
                        alt={item.name}
                        className="w-32 h-32 mx-auto rounded-xl object-cover"
                      />
                      <div className="flex items-center justify-center space-x-2">
                        <Icon name="Coins" size={20} className="text-game-yellow" />
                        <span className="text-2xl font-bold">{item.price}</span>
                      </div>
                      <Button 
                        className="w-full bg-game-blue hover:bg-game-blue/90 text-white font-bold"
                        disabled={
                          coins < item.price || 
                          (item.type === 'weapon' && inventory.weapons.includes(item.gameId)) ||
                          (item.type === 'vehicle' && inventory.vehicles.includes(item.gameId))
                        }
                        onClick={() => buyItem(item)}
                      >
                        {
                          (item.type === 'weapon' && inventory.weapons.includes(item.gameId)) ||
                          (item.type === 'vehicle' && inventory.vehicles.includes(item.gameId)) ? 
                          '–£–∂–µ –∫—É–ø–ª–µ–Ω–æ' :
                          coins >= item.price ? '–ö—É–ø–∏—Ç—å' : '–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç'
                        }
                      </Button>
                    </div>
                  </DialogContent>
                </Dialog>
              ))}
            </div>
          </TabsContent>

          <TabsContent value="promo" className="space-y-4 md:space-y-6">
            <div className="text-center mb-6 md:mb-8 animate-fade-in">
              <h2 className="text-2xl md:text-4xl font-bold text-gray-800 mb-2">–ü—Ä–æ–º–æ–∫–æ–¥—ã</h2>
              <p className="text-sm md:text-lg text-gray-600">–í–≤–µ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥ –∏ –ø–æ–ª—É—á–∏ –±–æ–Ω—É—Å–Ω—ã–µ –º–æ–Ω–µ—Ç—ã!</p>
            </div>

            <Card className="max-w-lg mx-auto">
              <CardHeader className="text-center">
                <CardTitle className="text-xl font-bold text-gray-800">–ê–∫—Ç–∏–≤–∞—Ü–∏—è –ø—Ä–æ–º–æ–∫–æ–¥–∞</CardTitle>
                <CardDescription>–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã: –ø–∏–Ω–≥–≤–∏–Ω, –∑–∞–π—á–∏–∫ (+100 –º–æ–Ω–µ—Ç –∫–∞–∂–¥—ã–π)</CardDescription>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="flex space-x-2">
                  <Input 
                    placeholder="–í–≤–µ–¥–∏ –ø—Ä–æ–º–æ–∫–æ–¥..."
                    value={promoCode}
                    onChange={(e) => setPromoCode(e.target.value)}
                    className="flex-1"
                  />
                  <Button 
                    onClick={handlePromoCode}
                    className="bg-game-orange hover:bg-game-orange/90 text-white font-bold"
                    disabled={!promoCode.trim()}
                  >
                    <Icon name="Gift" size={16} className="mr-2" />
                    –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å
                  </Button>
                </div>
                
                {usedPromoCodes.length > 0 && (
                  <div className="mt-4">
                    <p className="text-sm text-gray-600 mb-2">–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–µ –ø—Ä–æ–º–æ–∫–æ–¥—ã:</p>
                    <div className="flex flex-wrap gap-2">
                      {usedPromoCodes.map((code, index) => (
                        <Badge key={index} variant="outline" className="text-xs">
                          {code} ‚úÖ
                        </Badge>
                      ))}
                    </div>
                  </div>
                )}

                <div className="bg-gradient-to-r from-game-green to-game-yellow rounded-xl p-4 text-center">
                  <h3 className="text-lg font-bold text-white mb-2">üíé –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–≥—Ä–∞–¥—ã</h3>
                  <p className="text-white/90 text-sm mb-3">–ó–∞—Ö–æ–¥–∏ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –∏ –ø–æ–ª—É—á–∞–π –±–æ–Ω—É—Å—ã!</p>
                  <Button 
                    variant="secondary" 
                    className="font-bold"
                    onClick={() => {
                      setCoins(prev => prev + 50);
                      playSound('coin');
                      alert('üéÅ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –Ω–∞–≥—Ä–∞–¥–∞: +50 –º–æ–Ω–µ—Ç!');
                    }}
                  >
                    –ü–æ–ª—É—á–∏—Ç—å –Ω–∞–≥—Ä–∞–¥—É
                  </Button>
                </div>
              </CardContent>
            </Card>
          </TabsContent>
        </Tabs>
      </main>

      <footer className="bg-white/90 backdrop-blur-sm border-t-4 border-game-orange mt-8 md:mt-16">
        <div className="container mx-auto px-4 py-4 md:py-6 text-center">
          <p className="text-sm md:text-base text-gray-600">üêî Chicken Gun - –ù–∞—Å—Ç–æ—è—â–∏–µ –º–∏–Ω–∏-–∏–≥—Ä—ã —Å —ç–∫—à–µ–Ω–æ–º! üèÅ</p>
          <p className="text-xs text-gray-500 mt-2">–ü–æ–¥–¥–µ—Ä–∂–∫–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö —É—Å—Ç—Ä–æ–π—Å—Ç–≤ ‚Ä¢ –†–µ–∞–ª—å–Ω—ã–π –≥–µ–π–º–ø–ª–µ–π ‚Ä¢ {playersOnline} –∏–≥—Ä–æ–∫–æ–≤ –æ–Ω–ª–∞–π–Ω</p>
        </div>
      </footer>
    </div>
  );
};

export default Index;